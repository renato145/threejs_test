{"version":3,"sources":["index.js"],"names":["THREE","require","colors","getRandomNumber","Math","random","getRandomPoints","positions","Array","fill","forEach","push","Scene","points","useThree","scene","camera","aspect","geometryRef","useRef","useState","colorIdx","setColorIdx","setFirstRender","positionsArray","useMemo","Float32Array","nPoints","useSpring","setSpring","colorProps","useEffect","isFirstRender","d","length","useFrame","getValue","v","i","value","current","attributes","position","array","needsUpdate","fov","near","far","set","updateProjectionMatrix","background","Color","attach","ref","attachObject","count","itemSize","usage","DynamicDrawUsage","pointsMaterial","size","ReactDOM","render","setPoints","className","type","onClick","document","getElementById"],"mappings":"8NAMMA,G,MAAQC,EAAQ,IAWhBC,EAAS,CAAC,UAAW,UAAW,YAAa,cAAe,WAE5DC,EAAkB,kBAJJ,IAIWC,KAAKC,SAAS,KAEvCC,EAAkB,WACtB,IAAMC,EAAY,GAMlB,OALAC,MATc,KASCC,OAAOC,SAAQ,WAC5BH,EAAUI,KAAKR,KACfI,EAAUI,KAAKR,KACfI,EAAUI,KAAK,MAEVJ,GAGHK,EAAQ,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACMC,cAA1BC,EADoB,EACpBA,MAAOC,EADa,EACbA,OAAQC,EADK,EACLA,OAEjBC,EAAcC,mBAHQ,EAIMC,mBAAS,GAJf,mBAIpBC,EAJoB,KAIVC,EAJU,OAKYF,oBAAS,GALrB,mBAKPG,GALO,WAQtBC,EAAiBC,mBAAQ,kBAAM,IAAIC,aAAaC,OAAY,IARtC,EASSC,aAAU,iBAAO,CAEpDrB,UAAW,IAAIC,MAAMmB,KAAWlB,KAAK,OAXX,mBASlBF,EATkB,KASlBA,UAAasB,EATK,KActBC,EAAaF,YAAU,CAC3B,MAAS1B,EAAOmB,KA8BlB,OA3BAU,qBAAU,WACRF,EAAU,CAAEtB,UAAWM,IACvBU,GAAe,SAAAS,GAGb,OAFKA,GACHV,GAAY,SAAAW,GAAC,OAAKA,EAAE,GAAK/B,EAAOgC,WAC3B,OAER,CAAErB,EAAQgB,IAGbM,aAAS,WACP5B,EAAU6B,WAAW1B,SAAQ,SAAC2B,EAAEC,GAC9B,IAAMC,EAASD,EAAE,IAAO,EAAID,EAAEpB,EAASoB,EACvCnB,EAAYsB,QAAQC,WAAWC,SAASC,MAAML,GAAKC,KAErDrB,EAAYsB,QAAQC,WAAWC,SAASE,aAAc,KAGxDb,qBAAU,WACRf,EAAO6B,IA1DC,GA2DR7B,EAAO8B,KA1DE,GA2DT9B,EAAO+B,IA1DC,IA2DR/B,EAAO0B,SAASM,IAAI,EAAG,EA3Df,KA4DRhC,EAAOiC,yBACPlC,EAAMmC,WAAa,IAAIlD,EAAMmD,MAAM,YAClC,CAAEpC,EAAOC,IAGV,8BACE,gCACE,oCAAgBoC,OAAO,WAAWC,IAAKnC,GACrC,qCACEoC,aAAc,CAAC,aAAc,YAC7BC,MAAO1C,EAAOqB,OAAS,EACvBS,MAAOnB,EACPgC,SAAU,EACVC,MAAOzD,EAAM0D,oBAGjB,kBAAC,IAASC,eAAV,eACEP,OAAO,WACPQ,KA1ES,GA2EL9B,OA2Bd+B,IAASC,OAAO,mBApBJ,WAAO,IAAD,EACc1C,mBAASd,KADvB,mBACRO,EADQ,KACAkD,EADA,KAEhB,OACE,yBAAKC,UAAU,oBACb,kBAAC,IAAD,KACE,kBAACpD,EAAD,CAAOC,OAAQA,KAEjB,yBAAKmD,UAAU,oBACb,4BACEC,KAAK,SACLD,UAAU,kBACVE,QAAS,kBAAMH,EAAUzD,OAH3B,eAYQ,MAAS6D,SAASC,eAAe,U","file":"static/js/main.0a6c0e07.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.css';\nimport React, { useRef, useMemo, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Canvas, useThree,  useFrame } from 'react-three-fiber';\nimport { animated, useSpring } from 'react-spring-three';\nimport './index.css';\nconst THREE = require('three');\n// const d3 = require('d3');\n\n// camera settings\nconst fov = 30;\nconst near = 10;\nconst far = 100;\n// points generation\nconst nPoints = 100;\nconst randomScale = 50;\nconst pointsSize = 5;\nconst colors = ['hotpink', 'skyblue', 'indianred', 'forestgreen', 'thistle'];\n\nconst getRandomNumber = () => (Math.random()-0.5)*randomScale;\n\nconst getRandomPoints = () => {\n  const positions = []\n  Array(nPoints).fill().forEach(() => {\n    positions.push(getRandomNumber());\n    positions.push(getRandomNumber());\n    positions.push(0);\n  });\n  return positions;\n};\n\nconst Scene = ({ points }) => {\n  const { scene, camera, aspect } = useThree();\n  // const { scene, camera } = useThree();\n  const geometryRef = useRef();\n  const [ colorIdx, setColorIdx ] = useState(0);\n  const [ firstRender, setFirstRender ] = useState(true);\n\n  // Set up position array\n  const positionsArray = useMemo(() => new Float32Array(nPoints*3), []);\n  const [ { positions }, setSpring ] = useSpring(() => ({\n    // initial position\n    positions: new Array(nPoints*3).fill(0)\n  }));\n\n  const colorProps = useSpring({\n    'color': colors[colorIdx]\n  });\n\n  useEffect(() => {\n    setSpring({ positions: points });\n    setFirstRender(isFirstRender => {\n      if (!isFirstRender)\n        setColorIdx(d => (d+1) % colors.length);\n      return false;\n    });\n  }, [ points, setSpring ]);\n\n  // Animate point change\n  useFrame(() => {\n    positions.getValue().forEach((v,i) => {\n      const value = (i%3) === 0 ? v*aspect : v; // consider aspect\n      geometryRef.current.attributes.position.array[i] = value;\n    });\n    geometryRef.current.attributes.position.needsUpdate = true;\n  });\n\n  useEffect(() => {\n    camera.fov = fov;\n    camera.near = near;\n    camera.far = far;\n    camera.position.set(0, 0, far);\n    camera.updateProjectionMatrix();\n    scene.background = new THREE.Color(0xefefef);\n  }, [ scene, camera ]);\n\n  return (\n    <mesh>\n      <points>\n        <bufferGeometry attach='geometry' ref={geometryRef} >\n          <bufferAttribute\n            attachObject={['attributes', 'position']}\n            count={points.length / 3}\n            array={positionsArray}\n            itemSize={3}\n            usage={THREE.DynamicDrawUsage}\n          />\n          </bufferGeometry>\n        <animated.pointsMaterial\n          attach='material'\n          size={pointsSize}\n          {...colorProps}\n        />\n      </points>\n    </mesh>\n  );\n};\n\nconst App = () => {\n  const [ points, setPoints ] = useState(getRandomPoints());\n  return (\n    <div className='canvas-container'>\n      <Canvas>\n        <Scene points={points}/>\n      </Canvas>\n      <div className='button-container'>\n        <button\n          type='button'\n          className='btn btn-primary'\n          onClick={() => setPoints(getRandomPoints())}\n        >\n          Refresh\n        </button>\n      </div>\n    </div>\n  )\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}