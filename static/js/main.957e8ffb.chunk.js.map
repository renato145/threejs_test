{"version":3,"sources":["Controls.js","index.js","HoverDescription.js"],"names":["extend","MapControls","Controls","far","near","ref","useRef","useThree","camera","gl","resetCamera","current","reset","useEffect","domElement","addEventListener","removeEventListener","args","screenSpacePanning","minDistance","maxDistance","THREE","require","colors","sprite","TextureLoader","load","getRandomNumber","Math","random","getRandomPoints","positions","Array","fill","forEach","push","getRandomColors","Color","parseInt","length","r","g","b","Scene","points","pointsData","setHoverDescription","scene","aspect","geometryRef","positionsArray","useMemo","Float32Array","nPoints","colorsArray","useSpring","pointsSpring","colorsSpring","setSpring","useFrame","getValue","v","i","value","attributes","position","array","color","needsUpdate","background","onPointerOver","index","clientX","clientY","description","top","left","showLeft","max","hoverWidth","className","style","width","HoverDescription","onPointerOut","attach","attachObject","count","itemSize","usage","DynamicDrawUsage","size","map","transparent","alphaTest","sizeAttenuation","vertexColors","VertexColors","ReactDOM","render","useState","setPoints","setColors","animatePoints","setAnimatePoints","animateColors","setAnimateColors","toogleColorsClass","setToogleColorsClass","tooglePointsClass","setTooglePointsClass","hoverData","setHoverData","keys","d","fov","data","type","onClick","clearInterval","interval","window","setInterval","toogleColors","tooglePoints","document","getElementById"],"mappings":"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","file":"static/js/main.957e8ffb.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { useThree, extend } from 'react-three-fiber';\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls';\nextend({ MapControls });\n\nexport const Controls = ({ far, near }) => {\n  const ref = useRef();\n  const { camera, gl } = useThree();\n\n  // Reset camera on double click\n  const resetCamera = () => {\n    ref.current.reset();\n  };\n\n  useEffect(() => {\n    const domElement = ref.current.domElement;\n    domElement.addEventListener('dblclick', resetCamera);\n    return () => domElement.removeEventListener('resize', resetCamera);\n  }, [] );\n\n  return (\n    <mapControls\n      ref={ref}\n      args={[camera, gl.domElement]}\n      screenSpacePanning={true}\n      minDistance={near}\n      maxDistance={far}\n    />\n  );\n};\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React, { useRef, useMemo, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Canvas, useThree, useFrame } from 'react-three-fiber';\nimport { useSpring } from 'react-spring-three';\nimport { HoverDescription } from './HoverDescription';\nimport { Controls } from './Controls';\nimport './index.css';\n\nconst THREE = require('three');\n// const d3 = require('d3');\n\n// camera settings\nconst fov = 30;\nconst near = 10;\nconst far = 1000;\nconst defaultCameraZoom = 100;\n// points generation\nconst nPoints = 100;\nconst randomScale = 50;\nconst pointsSize = 25;\nconst colors = ['mediumslateblue', 'indianred'];\nconst sprite = new THREE.TextureLoader().load('textures/discNoShadow.png');\n\nconst getRandomNumber = () => (Math.random()-0.5)*randomScale;\n\nconst getRandomPoints = () => {\n  let positions = []\n  Array(nPoints).fill().forEach(() => {\n    positions.push(getRandomNumber(), getRandomNumber(), 0);\n  });\n  return positions;\n};\n\nconst getRandomColor = () => new THREE.Color(colors[parseInt(Math.random() * colors.length)]);\nconst getRandomColors = () => {\n  let colors = []\n  Array(nPoints).fill().forEach(() => {\n    const {r,g,b} = getRandomColor();\n    colors.push(r,g,b);\n  });\n  return colors;\n};\n\nconst Scene = ({ points, colors, pointsData, setHoverDescription }) => {\n  const { scene, aspect } = useThree();\n  const ref = useRef();\n  const geometryRef = useRef();\n\n  // Initialize arrays\n  const positionsArray = useMemo(() => new Float32Array(nPoints*3), []);\n  const colorsArray = useMemo(() => new Float32Array(nPoints*3), []);\n\n  // Initialize springs\n  const [ { pointsSpring, colorsSpring }, setSpring ] = useSpring(() => ({\n    // initial position\n    pointsSpring: points,\n    colorsSpring: Array(nPoints*3).fill(1),\n  }));\n\n  // Animation effects\n  useEffect(() => {\n    setSpring({ pointsSpring: points });\n  }, [ points, setSpring ]);\n\n  useEffect(() => {\n    setSpring({ colorsSpring: colors });\n  }, [ colors, setSpring ]);\n\n  // Animate point change\n  useFrame(() => {\n    pointsSpring.getValue().forEach((v,i) => {\n      const value = (i%3) === 0 ? v*aspect : v; // consider aspect\n      geometryRef.current.attributes.position.array[i] = value;\n    });\n    colorsSpring.getValue().forEach((v,i) => {\n      geometryRef.current.attributes.color.array[i] = v;\n    })\n    geometryRef.current.attributes.position.needsUpdate = true;\n    geometryRef.current.attributes.color.needsUpdate = true;\n  });\n\n  useEffect(() => {\n    scene.background = new THREE.Color(0xefefef);\n  }, [ scene ]);\n\n  // Events\n  const pointOver = ( { index, clientX, clientY } ) => {\n    setHoverDescription(HoverDescription({\n      description: `mouse over: ${pointsData[index]}`,\n      top: clientY,\n      left: clientX,\n    }));\n  };\n\n  const pointOut = () => {\n    setHoverDescription('');\n  };\n\n  return (\n    <mesh\n      ref={ref}\n      onPointerOver={pointOver}\n      onPointerOut={pointOut}\n    >\n      <points>\n        <bufferGeometry\n          attach='geometry'\n          ref={geometryRef}\n        >\n          <bufferAttribute\n            attachObject={['attributes', 'position']}\n            count={points.length / 3}\n            array={positionsArray}\n            itemSize={3}\n            usage={THREE.DynamicDrawUsage}\n          />\n          <bufferAttribute\n            attachObject={['attributes', 'color']}\n            count={points.length / 3}\n            array={colorsArray}\n            itemSize={3}\n            usage={THREE.DynamicDrawUsage}\n          />\n        </bufferGeometry>\n        <pointsMaterial\n          attach='material'\n          size={pointsSize}\n          map={sprite}\n          transparent={true}\n          alphaTest={0.5}\n          sizeAttenuation={false}\n          vertexColors={THREE.VertexColors}\n        />\n      </points>\n    </mesh>\n  );\n};\n\nconst App = () => {\n  const [ points, setPoints ] = useState(getRandomPoints());\n  const [ colors, setColors ] = useState(getRandomColors());\n  const [ animatePoints, setAnimatePoints ] = useState(false);\n  const [ animateColors, setAnimateColors ] = useState(false);\n  const [ toogleColorsClass, setToogleColorsClass ] = useState('light');\n  const [ tooglePointsClass, setTooglePointsClass ] = useState('light');\n  const [ hoverData, setHoverData] = useState('');\n  const pointsData = useMemo(() => [...Array(nPoints).keys()].map(d => `Points #${d}`), []);\n\n  const setHoverDescription = data => {\n    setHoverData(data)\n  };\n\n  // toogle functions\n  const tooglePoints = () => {\n    if ( !animatePoints ) {\n      const interval = window.setInterval(() => setPoints(getRandomPoints()), 1000);\n      setAnimatePoints(interval);\n      setTooglePointsClass('dark');\n    } else {\n      clearInterval(animatePoints);\n      setAnimatePoints(false);\n      setTooglePointsClass('light');\n    }\n  };\n\n  const toogleColors = () => {\n    if ( !animateColors ) {\n      const interval = window.setInterval(() => setColors(getRandomColors()), 1000);\n      setAnimateColors(interval);\n      setToogleColorsClass('dark');\n    } else {\n      clearInterval(animateColors);\n      setAnimateColors(false);\n      setToogleColorsClass('light');\n    }\n  };\n\n  return (\n    <div className='canvas-container'>\n      <Canvas\n        camera={{\n          fov: fov,\n          near: near,\n          far: far,\n          position: [0, 0, defaultCameraZoom]\n        }}\n      >\n        <Scene\n          points={points}\n          colors={colors}\n          pointsData={pointsData}\n          setHoverDescription={setHoverDescription}\n        />\n        <Controls\n          far={far}\n          near={near}\n        />\n      </Canvas>\n      {hoverData}\n      <div className='button-container'>\n        <button\n          type='button'\n          className='btn btn-light'\n          onClick={() => setColors(getRandomColors())}\n        >\n          Change colors\n        </button>\n        <button\n          type='button'\n          className={`btn btn-${toogleColorsClass}`}\n          onClick={() => toogleColors()}\n        >\n          Toogle colors\n        </button>\n        <button\n          type='button'\n          className='btn btn-light'\n          onClick={() => setPoints(getRandomPoints())}\n        >\n          Refresh\n        </button>\n        <button\n          type='button'\n          className={`btn btn-${tooglePointsClass}`}\n          onClick={() => tooglePoints()}\n        >\n          Toogle Refresh\n        </button>\n      </div>\n    </div>\n  )\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React from 'react';\n\nconst hoverWidth = 150;\n\nexport const HoverDescription = ({ description, top, left }) => {\n  const showLeft = Math.max(left-hoverWidth/2, 0);\n  return (\n  <div\n    className='hover-description'\n    style={{top: top, left: showLeft, width: hoverWidth}}\n  >\n    {description}\n  </div>);\n};\n"],"sourceRoot":""}