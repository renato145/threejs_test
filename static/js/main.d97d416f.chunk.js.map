{"version":3,"sources":["d3Controls.js","useCustomHover.js","index.js","HoverDescription.js"],"names":["toRadians","angle","Math","PI","d3Controls","fov","near","far","defaultCameraZoom","renderer","camera","size","width","height","getScaleFromZ","z","tan","getZFromScale","scale","threeZoom","zoom","scaleExtent","on","x","y","k","position","set","zoomHandler","event","transform","view","select","domElement","call","initialScale","initialTransform","zoomIdentity","translate","THREE","require","backgroundColor","Color","colors","sprite","TextureLoader","load","getRandomNumber","random","getRandomPoints","positions","Array","fill","forEach","push","getRandomColors","parseInt","length","r","g","b","Scene","points","pointsData","setHoverData","useThree","scene","aspect","gl","mouse","ref","useRef","pointsRef","geometryRef","useEffect","highlightRef","highlightPoint","useMemo","point","Float32Array","color","show","onPointHover","useCallback","index","positionsArray","slice","d","i","colorsArray","idxs","current","attributes","needsUpdate","pointColor","map","toFixed","description","top","left","showLeft","right","max","hoverWidth","className","style","HoverDescription","onPointOut","raycaster","Raycaster","params","Points","threshold","checkIntersects","setFromCamera","intersects","intersectObject","intersect","sort","distanceToRay","project","addScalar","divideScalar","useCustomHover","nPoints","useSpring","pointsSpring","colorsSpring","setSpring","useFrame","getValue","v","value","background","attach","attachObject","count","array","itemSize","usage","DynamicDrawUsage","transparent","alphaTest","sizeAttenuation","vertexColors","VertexColors","ReactDOM","render","useState","setPoints","setColors","animatePoints","setAnimatePoints","animateColors","setAnimateColors","toogleColorsClass","setToogleColorsClass","tooglePointsClass","setTooglePointsClass","hoverData","keys","href","type","onClick","clearInterval","interval","window","setInterval","toogleColors","tooglePoints","document","getElementById"],"mappings":"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","file":"static/js/main.d97d416f.chunk.js","sourcesContent":["// From https://observablehq.com/@grantcuster/using-three-js-for-2d-data-visualization\nimport { zoom, event, select, zoomIdentity } from 'd3';\n\nconst toRadians = angle => (angle * (Math.PI/180));\n\nexport const d3Controls = ({ fov, near, far, defaultCameraZoom, renderer, camera, size }) => {\n  const { width, height } = size;\n\n  const zoomHandler = ({ x, y, k }) => {\n    camera.position.set(\n      -(x -  width/2) / k, // x\n       (y - height/2) / k, // y\n       getZFromScale(k)    // z\n    )\n  };\n\n  const getScaleFromZ = z => ( height / (2 * z * Math.tan(toRadians(fov/2))) );\n  const getZFromScale = scale => ( height / scale / (2 * Math.tan(toRadians(fov/2))) );\n\n  const threeZoom = zoom()\n    .scaleExtent([getScaleFromZ(far), getScaleFromZ(near)])\n    .on('zoom', () => {\n      zoomHandler(event.transform);\n    });\n  \n  // Add zoom listener\n  const view = select(renderer.domElement);\n  view.call(threeZoom);\n  const initialScale = getScaleFromZ(defaultCameraZoom);\n  const initialTransform = zoomIdentity\n    .translate(width/2, height/2)\n    .scale(initialScale);    \n  threeZoom.transform(view, initialTransform);\n  camera.position.set(0, 0, defaultCameraZoom);\n\n  // Double click resets camera\n  view.on('dblclick.zoom', () => {\n    threeZoom.transform(view, initialTransform);\n    camera.position.set(0, 0, defaultCameraZoom);\n  });\n};\n","import { useMemo, useEffect, useCallback } from 'react';\nimport { select } from 'd3';\nconst THREE = require('three');\n\nexport const useCustomHover = ({\n  renderer,\n  mouse,\n  camera,\n  size,\n  pointsRef,\n  onPointHover,\n  onPointOut\n  }) => {\n  const raycaster = useMemo(() => {\n    const raycaster = new THREE.Raycaster();\n    raycaster.params.Points.threshold = 1;\n    return raycaster;\n  }, []);\n\n  const checkIntersects = useCallback( position => {\n    raycaster.setFromCamera(position, camera);\n    let intersects = raycaster.intersectObject(pointsRef.current);\n    if (intersects[0]) {\n      const intersect = intersects.sort(({ distanceToRay }) => distanceToRay)[0];\n      const point = intersect.point;\n      point.project(camera).addScalar(1).divideScalar(2);\n      const x = point.x * size.width;\n      const y = (1-point.y) * size.height;\n      onPointHover({ index: intersect.index, x, y });\n    } else {\n      onPointOut();\n    }\n  }, [ size ]);\n\n  useEffect(() => {\n    const view = select(renderer.domElement);\n    view.on('mousemove', () => {\n      checkIntersects(mouse);\n    });\n  }, [ renderer, mouse, checkIntersects ]);\n\n  // const checkIntersects = position => {\n};\n\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React, { useRef, useMemo, useState, useEffect, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Canvas, useThree, useFrame } from 'react-three-fiber';\nimport { useSpring } from 'react-spring-three';\nimport { HoverDescription } from './HoverDescription';\nimport { d3Controls } from './d3Controls';\nimport { useCustomHover } from './useCustomHover';\nimport './index.css';\nconst THREE = require('three');\n// const d3 = require('d3');\n\n// camera settings\nconst fov = 30;\nconst near = 20;\nconst far = 150;\nconst defaultCameraZoom = 100;\n// canvas settings\nconst backgroundColor = new THREE.Color(0xefefef);\n// points generation\nconst nPoints = 100;\nconst randomScale = 50;\nconst pointsSize = 15;\nconst highlightPointSize = 40;\nconst colors = ['#ffd700', '#ffb14e', '#fa8775', '#ea5f94', '#cd34b5', '#9d02d7', '#0000ff'];\nconst sprite = new THREE.TextureLoader().load('textures/discNoShadow.png');\n\nconst getRandomNumber = () => (Math.random()-0.5)*randomScale;\n\nconst getRandomPoints = () => {\n  let positions = []\n  Array(nPoints).fill().forEach(() => {\n    positions.push(getRandomNumber(), getRandomNumber(), 0);\n  });\n  return positions;\n};\n\nconst getRandomColor = () => new THREE.Color(colors[parseInt(Math.random() * colors.length)]);\nconst getRandomColors = () => {\n  let colors = []\n  Array(nPoints).fill().forEach(() => {\n    const {r,g,b} = getRandomColor();\n    colors.push(r,g,b);\n  });\n  return colors;\n};\n\nconst Scene = ({ points, colors, pointsData, setHoverData }) => {\n  const { scene, aspect, gl, camera, size, mouse } = useThree();\n  const ref = useRef();\n  const pointsRef = useRef();\n  const geometryRef = useRef();\n\n  // d3 controls (zoom and pan)\n  useEffect(() => {\n    d3Controls({ fov, near, far, defaultCameraZoom, renderer: gl, camera, size});\n  }, [ gl, camera, size ])\n\n  // Custom hover\n  const highlightRef = useRef();\n  const highlightPoint = useMemo(() => ({\n    point: new Float32Array(3),\n    color: new Float32Array(3),\n    show: false,\n  }), []);\n\n  const onPointHover = useCallback(( { index, x, y } ) => {\n    // Highlight Point\n    positionsArray.slice(index*3,(index+1)*3).forEach( (d, i) => {highlightPoint.point[i] = d});\n    colorsArray.slice(index*3,(index+1)*3).forEach( (d, i) => {highlightPoint.color[i] = d});\n    highlightPoint.show = true;\n    const { idxs } = pointsData;\n    highlightRef.current.attributes.position.needsUpdate = true;\n    highlightRef.current.attributes.color.needsUpdate = true;\n\n    // hover description\n    const pointColor = colors.slice(index*3, (index+1)*3).map(d => d.toFixed(2));\n    setHoverData(HoverDescription({\n      description: `mouse over: ${idxs[index]}\\nColor: rgb(${pointColor})`,\n      top: y,\n      left: x,\n      size\n    }));\n  }, [ points, size ]);\n\n  const onPointOut = () => {\n    highlightPoint.show = false;\n    setHoverData('');\n  };\n\n  useCustomHover({ renderer: gl, mouse, camera, size, pointsRef, onPointHover, onPointOut });\n\n  // Initialize arrays\n  const positionsArray = useMemo(() => new Float32Array(nPoints*3), []);\n  const colorsArray = useMemo(() => new Float32Array(nPoints*3), []);\n\n  // Initialize springs\n  const [ { pointsSpring, colorsSpring }, setSpring ] = useSpring(() => ({\n    // initial position\n    pointsSpring: points,\n    colorsSpring: Array(nPoints*3).fill(1),\n  }));\n\n  // Animation effects\n  useEffect(() => {\n    setSpring({ pointsSpring: points });\n  }, [ points, setSpring ]);\n\n  useEffect(() => {\n    setSpring({ colorsSpring: colors });\n  }, [ colors, setSpring ]);\n\n  // Animate point change\n  useFrame(() => {\n    pointsSpring.getValue().forEach((v,i) => {\n      const value = (i%3) === 0 ? v*aspect : v; // consider aspect\n      positionsArray[i] = value;\n    });\n    colorsSpring.getValue().forEach((v,i) => {\n      colorsArray[i] = v;\n    })\n    geometryRef.current.attributes.position.needsUpdate = true;\n    geometryRef.current.attributes.color.needsUpdate = true;\n  });\n\n  useEffect(() => {\n    scene.background = backgroundColor;\n  }, [ scene ]);\n\n  return (\n    <group>\n\n      <mesh ref={ref}>\n        <points ref={pointsRef}>\n          <bufferGeometry\n            attach='geometry'\n            ref={geometryRef}\n          >\n            <bufferAttribute\n              attachObject={['attributes', 'position']}\n              count={points.length / 3}\n              array={positionsArray}\n              itemSize={3}\n              usage={THREE.DynamicDrawUsage}\n            />\n            <bufferAttribute\n              attachObject={['attributes', 'color']}\n              count={points.length / 3}\n              array={colorsArray}\n              itemSize={3}\n              usage={THREE.DynamicDrawUsage}\n            />\n          </bufferGeometry>\n          <pointsMaterial\n            attach='material'\n            size={pointsSize}\n            map={sprite}\n            transparent={true}\n            alphaTest={0.5}\n            sizeAttenuation={false}\n            vertexColors={THREE.VertexColors}\n          />\n        </points>\n      </mesh>\n\n      <mesh>\n        <points>\n          <bufferGeometry\n            attach='geometry'\n            ref={highlightRef}\n          >\n            <bufferAttribute\n              attachObject={['attributes', 'position']}\n              count={highlightPoint.show}\n              array={highlightPoint.point}\n              itemSize={3}\n              usage={THREE.DynamicDrawUsage}\n            /> \n            <bufferAttribute\n              attachObject={['attributes', 'color']}\n              count={1}\n              array={highlightPoint.color}\n              itemSize={3}\n              usage={THREE.DynamicDrawUsage}\n            />\n          </bufferGeometry>\n          <pointsMaterial\n            attach='material'\n            size={highlightPointSize}\n            map={sprite}\n            transparent={true}\n            alphaTest={0.5}\n            sizeAttenuation={false}\n            vertexColors={THREE.VertexColors}\n          />\n        </points>\n      </mesh>\n\n    </group>\n\n  );\n};\n\nconst App = () => {\n  const [ points, setPoints ] = useState(getRandomPoints());\n  const [ colors, setColors ] = useState(getRandomColors());\n  const [ animatePoints, setAnimatePoints ] = useState(false);\n  const [ animateColors, setAnimateColors ] = useState(false);\n  const [ toogleColorsClass, setToogleColorsClass ] = useState('light');\n  const [ tooglePointsClass, setTooglePointsClass ] = useState('light');\n  const [ hoverData, setHoverData] = useState('');\n  const pointsData = useMemo(() => ({\n    idxs: [...Array(nPoints).keys()].map(d => `Points #${d}`),\n  }), []);\n\n  // toogle functions\n  const tooglePoints = () => {\n    if ( !animatePoints ) {\n      const interval = window.setInterval(() => setPoints(getRandomPoints()), 1000);\n      setAnimatePoints(interval);\n      setTooglePointsClass('dark');\n    } else {\n      clearInterval(animatePoints);\n      setAnimatePoints(false);\n      setTooglePointsClass('light');\n    }\n  };\n\n  const toogleColors = () => {\n    if ( !animateColors ) {\n      const interval = window.setInterval(() => setColors(getRandomColors()), 1000);\n      setAnimateColors(interval);\n      setToogleColorsClass('dark');\n    } else {\n      clearInterval(animateColors);\n      setAnimateColors(false);\n      setToogleColorsClass('light');\n    }\n  };\n\n  return (\n    <div style={{height: '100%'}}>\n      <div className='canvas-container h-100'>\n        <Canvas\n          camera={{\n            fov: fov,\n            near: 0.1,\n            far: far+1,\n            position: [0, 0, defaultCameraZoom]\n          }}\n        >\n          <Scene\n            points={points}\n            colors={colors}\n            pointsData={pointsData}\n            setHoverData={setHoverData}\n          />\n        </Canvas>\n        {hoverData}\n        <div className='row'>\n          <div className='git-info col'>\n            <a href='https://github.com/renato145/threejs_test'>Source code</a>\n          </div>\n          <div className='button-container col'>\n            <button\n              type='button'\n              className='btn btn-light'\n              onClick={() => setColors(getRandomColors())}\n            >\n              Change colors\n            </button>\n            <button\n              type='button'\n              className={`btn btn-${toogleColorsClass}`}\n              onClick={() => toogleColors()}\n            >\n              Toogle colors\n            </button>\n            <button\n              type='button'\n              className='btn btn-light'\n              onClick={() => setPoints(getRandomPoints())}\n            >\n              Refresh\n            </button>\n            <button\n              type='button'\n              className={`btn btn-${tooglePointsClass}`}\n              onClick={() => tooglePoints()}\n            >\n              Toogle Refresh\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React from 'react';\n\nconst hoverWidth = 150;\n\nexport const HoverDescription = ({ description, top, left, size }) => {\n  const showLeft = (left+hoverWidth) > size.width\n    ? size.right - hoverWidth\n    : Math.max(left-hoverWidth/2, size.left);\n\n  return (\n    <div\n      className='hover-description'\n      style={{\n        top: top,\n        left: showLeft,\n        width: hoverWidth\n      }}\n    >\n      {description}\n    </div>);\n};\n"],"sourceRoot":""}