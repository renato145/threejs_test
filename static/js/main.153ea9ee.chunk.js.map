{"version":3,"sources":["index.js"],"names":["THREE","require","d3","Points","ref","useRef","useThree","scene","camera","points","useMemo","positions","range","map","x","Math","random","y","pointsGeometry","Geometry","colors","forEach","vertex","Vector3","vertices","push","color","Color","pointsMaterial","PointsMaterial","size","sizeAttenuation","vertexColors","VertexColors","fov","aspect","width","near","far","position","set","background","add","ReactDOM","render","style","height","document","getElementById"],"mappings":"mJAAA,mDAIMA,GAJN,MAIcC,EAAQ,IAChBC,EAAKD,EAAQ,IASbE,EAAS,WACb,IAAMC,EAAMC,mBADO,EAEOC,cAAlBC,EAFW,EAEXA,MAAOC,EAFI,EAEJA,OACTC,EAASC,mBAAQ,WACrB,IAAMC,EAAYT,EAAGU,MANT,KAMwBC,KAAI,iBAAO,CAC7CC,EAAuB,KAAnBC,KAAKC,SAAS,IAClBC,EAAuB,KAAnBF,KAAKC,SAAS,QAEdE,EAAiB,IAAIlB,EAAMmB,SAC3BC,EAAS,GACfT,EAAUU,SAAQ,YAAe,IAAZP,EAAW,EAAXA,EAAGG,EAAQ,EAARA,EAChBK,EAAS,IAAItB,EAAMuB,QAAQT,EAAGG,EAAG,GACvCC,EAAeM,SAASC,KAAKH,GAC7B,IAAMI,EAAQ,IAAI1B,EAAM2B,MAAM,WAC9BP,EAAOK,KAAKC,MAEdR,EAAeE,OAASA,EACxB,IAAMQ,EAAiB,IAAI5B,EAAM6B,eAAe,CAC9CC,KAAM,EACNC,iBAAiB,EACjBC,aAAchC,EAAMiC,eAItB,OAAO,IAAIjC,EAAMG,OAAOe,EAAgBU,KACvC,IAUH,OARApB,EAAO0B,IAhCG,GAiCV1B,EAAO2B,OAASC,IAChB5B,EAAO6B,KAjCI,GAkCX7B,EAAO8B,IAjCG,IAkCV9B,EAAO+B,SAASC,IAAI,EAAG,EAlCb,KAmCVjC,EAAMkC,WAAa,IAAIzC,EAAM2B,MAAM,UACnCpB,EAAMmC,IAAIjC,GAGR,0BACEL,IAAKA,KAiCXuC,IAASC,OAAO,mBAXJ,WACV,OACE,yBAAKC,MAAO,CAACT,MAnEH,IAmEiBU,OApEhB,MAqET,yCACA,kBAAC,IAAD,KACE,kBAAC3C,EAAD,UAMQ,MAAS4C,SAASC,eAAe,U","file":"static/js/main.153ea9ee.chunk.js","sourcesContent":["import React, { useRef, useMemo } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Canvas, useThree } from 'react-three-fiber'\nimport './index.css';\nconst THREE = require('three');\nconst d3 = require('d3');\n\nconst height = 500;\nconst width = 800;\nconst fov = 30;\nconst near = 10;\nconst far = 100;\nconst nPoints = 100;\n\nconst Points = () => {\n  const ref = useRef();\n  const { scene, camera } = useThree();\n  const points = useMemo(() => {\n    const positions = d3.range(nPoints).map(() => ({\n      x: (Math.random()-0.5)*100,\n      y: (Math.random()-0.5)*100,\n    }));\n    const pointsGeometry = new THREE.Geometry();\n    const colors = [];\n    positions.forEach(({ x, y }) => {\n      const vertex = new THREE.Vector3(x, y, 0);\n      pointsGeometry.vertices.push(vertex);\n      const color = new THREE.Color('hotpink');\n      colors.push(color);\n    });\n    pointsGeometry.colors = colors;\n    const pointsMaterial = new THREE.PointsMaterial({\n      size: 8,\n      sizeAttenuation: false,\n      vertexColors: THREE.VertexColors,\n    });\n    // TODO: Sprite settings\n\n    return new THREE.Points(pointsGeometry, pointsMaterial);\n  }, []);\n\n  camera.fov = fov;\n  camera.aspect = width / height;\n  camera.near = near;\n  camera.far = far;\n  camera.position.set(0, 0, far);\n  scene.background = new THREE.Color(0xefefef);\n  scene.add(points);\n\n  return (\n    <mesh\n      ref={ref}\n    >\n    </mesh>\n  );\n};\n\n// const Thing = () => {\n//   const ref = useRef();\n//   useFrame(() => (ref.current.rotation.x = ref.current.rotation.y += 0.01));\n//   return (\n//     <mesh\n//       ref={ref}\n//       onClick={e => console.log('click')}\n//       onPointerOver={e => console.log('hover')}\n//       onPointerOut={e => console.log('unhover')}\n//     >\n//       <boxBufferGeometry attach='geometry' args={[2,2,2]} />\n//       <meshNormalMaterial attach='material' />\n//     </mesh>\n//   );\n// };\n\nconst App = () => {\n  return (\n    <div style={{width: width, height: height}}>\n      <p>Testing :)</p>\n      <Canvas>\n        <Points />\n      </Canvas>\n    </div>\n  )\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}