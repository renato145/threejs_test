{"version":3,"sources":["index.js"],"names":["THREE","require","getRandomNumber","Math","random","getRandomPoints","positions","Array","fill","forEach","push","Scene","points","useThree","scene","camera","geometryRef","useRef","positionsArray","useMemo","Float32Array","nPoints","useSpring","setSpring","useEffect","useFrame","getValue","v","i","current","attributes","position","array","needsUpdate","fov","aspect","width","near","far","set","updateProjectionMatrix","background","Color","attach","ref","onPointerOver","console","log","attachObject","count","length","itemSize","usage","DynamicDrawUsage","size","color","ReactDOM","render","useState","setPoints","style","height","className","type","onClick","document","getElementById"],"mappings":"8NAMMA,G,MAAQC,EAAQ,IAYhBC,EAAkB,kBAHJ,IAGWC,KAAKC,SAAS,KAEvCC,EAAkB,WACtB,IAAMC,EAAY,GAMlB,OALAC,MARc,IAQCC,OAAOC,SAAQ,WAC5BH,EAAUI,KAAKR,KACfI,EAAUI,KAAKR,KACfI,EAAUI,KAAK,MAEVJ,GAGHK,EAAQ,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACFC,cAAlBC,EADoB,EACpBA,MAAOC,EADa,EACbA,OACTC,EAAcC,mBAEdC,EAAiBC,mBAAQ,kBAAM,IAAIC,aAAaC,MAAY,IAJtC,EAMSC,aAAU,iBAAO,CAEpDhB,UAAW,IAAIC,MAAMc,IAAWb,KAAK,OARX,mBAMlBF,EANkB,KAMlBA,UAAaiB,EANK,KA8B5B,OAnBAC,qBAAU,WACRD,EAAU,CAAEjB,UAAWM,MACtB,CAAEA,EAAQW,IAEbE,aAAS,WACPnB,EAAUoB,WAAWjB,SAAQ,SAACkB,EAAEC,GAC9BZ,EAAYa,QAAQC,WAAWC,SAASC,MAAMJ,GAAKD,KAErDX,EAAYa,QAAQC,WAAWC,SAASE,aAAc,KAGxDlB,EAAOmB,IAzCG,GA0CVnB,EAAOoB,OAASC,IAChBrB,EAAOsB,KA1CI,GA2CXtB,EAAOuB,IA1CG,IA2CVvB,EAAOgB,SAASQ,IAAI,EAAG,EA3Cb,KA4CVxB,EAAOyB,yBACP1B,EAAM2B,WAAa,IAAIzC,EAAM0C,MAAM,UAGjC,8BACE,gCACE,oCAAgBC,OAAO,WAAWC,IAAK5B,EAAa6B,cAAe,kBAAMC,QAAQC,IAAI,SACnF,qCACEC,aAAc,CAAC,aAAc,YAC7BC,MAAOrC,EAAOsC,OAAS,EACvBlB,MAAOd,EACPiC,SAAU,EACVC,MAAOpD,EAAMqD,oBAGjB,oCAAgBV,OAAO,WAAWW,KAxDvB,GAwDyCC,MAAM,eA2BlEC,IAASC,OAAO,mBArBJ,WAAO,IAAD,EACcC,mBAASrD,KADvB,mBACRO,EADQ,KACA+C,EADA,KAGhB,OACE,yBAAKC,MAAO,CAACxB,MAxEH,IAwEiByB,OAzEhB,MA0ET,kBAAC,IAAD,KACE,kBAAClD,EAAD,CAAOC,OAAQA,KAEjB,yBAAKkD,UAAU,oBACb,4BACEC,KAAK,SACLD,UAAU,kBACVE,QAAS,kBAAML,EAAUtD,OAH3B,eAYQ,MAAS4D,SAASC,eAAe,U","file":"static/js/main.f8c044f0.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.css';\nimport React, { useRef, useMemo, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Canvas, useThree, useUpdate, useFrame } from 'react-three-fiber';\nimport { animated, useSpring } from 'react-spring-three';\nimport './index.css';\nconst THREE = require('three');\n// const d3 = require('d3');\n\nconst height = 500;\nconst width = 800;\nconst fov = 30;\nconst near = 10;\nconst far = 100;\nconst nPoints = 20;\nconst randomScale = 40;\nconst pointsSize = 10;\n\nconst getRandomNumber = () => (Math.random()-0.5)*randomScale;\n\nconst getRandomPoints = () => {\n  const positions = []\n  Array(nPoints).fill().forEach(() => {\n    positions.push(getRandomNumber());\n    positions.push(getRandomNumber());\n    positions.push(0);\n  });\n  return positions;\n};\n\nconst Scene = ({ points }) => {\n  const { scene, camera } = useThree();\n  const geometryRef = useRef();\n\n  const positionsArray = useMemo(() => new Float32Array(nPoints*3), []);\n\n  const [ { positions }, setSpring ] = useSpring(() => ({\n    // initial position\n    positions: new Array(nPoints*3).fill(0)\n  }));\n\n  useEffect(() => {\n    setSpring({ positions: points });\n  }, [ points, setSpring ]);\n\n  useFrame(() => {\n    positions.getValue().forEach((v,i) => {\n      geometryRef.current.attributes.position.array[i] = v;\n    });\n    geometryRef.current.attributes.position.needsUpdate = true;\n  });\n\n  camera.fov = fov;\n  camera.aspect = width / height;\n  camera.near = near;\n  camera.far = far;\n  camera.position.set(0, 0, far);\n  camera.updateProjectionMatrix();\n  scene.background = new THREE.Color(0xefefef);\n\n  return (\n    <mesh>\n      <points>\n        <bufferGeometry attach='geometry' ref={geometryRef} onPointerOver={() => console.log('asd')} >\n          <bufferAttribute\n            attachObject={['attributes', 'position']}\n            count={points.length / 3}\n            array={positionsArray}\n            itemSize={3}\n            usage={THREE.DynamicDrawUsage}\n          />\n          </bufferGeometry>\n        <pointsMaterial attach='material' size={pointsSize} color='hotpink' />\n      </points>\n    </mesh>\n  );\n};\n\nconst App = () => {\n  const [ points, setPoints ] = useState(getRandomPoints());\n\n  return (\n    <div style={{width: width, height: height}}>\n      <Canvas>\n        <Scene points={points}/>\n      </Canvas>\n      <div className='button-container'>\n        <button\n          type='button'\n          className='btn btn-primary'\n          onClick={() => setPoints(getRandomPoints())}\n        >\n          Refresh\n        </button>\n      </div>\n    </div>\n  )\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}